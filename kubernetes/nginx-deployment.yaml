# NOTE: This approach based in the docker-compose image does not work, the ConfigMap does not get stored inside the pod for some reason, so I decided to go for the nginx-ingress approach instead

# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: nginx-config
#   namespace: prod
# data:
#   nginx.conf: |
#     server {
#       listen 80;

#       location / {
#         proxy_pass http://root-service:8001;
#       }

#       location /api/v1/movies {
#         proxy_pass http://movie-service:8002/api/v1/movies;
#       }
#     }
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx
#   namespace: prod
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: nginx
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#       - name: nginx
#         image: nginx:latest
#         ports:
#         - containerPort: 80
#         volumeMounts:
#         - mountPath: /etc/nginx/
#           name: nginx-config
#       volumes:
#       - name: nginx-config
#         configMap:
#           name: nginx-config

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx
#   namespace: prod
# spec:
#   type: NodePort
#   selector:
#     app: nginx
#   ports:
#   - protocol: TCP
#     port: 80
#     targetPort: 80
#     nodePort: 30000